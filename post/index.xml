<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yang&#39;s Den</title>
    <link>https://songyang0716.github.io/post/index.xml</link>
    <description>Recent content in Posts on Yang&#39;s Den</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://songyang0716.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>An Analysis of Premier League in R</title>
      <link>https://songyang0716.github.io/2017/04/an-analysis-of-premier-league-in-r/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://songyang0716.github.io/2017/04/an-analysis-of-premier-league-in-r/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;Premier League&lt;/strong&gt; is an English professional league for men’s association football clubs. At the top of the English football league system, it is the country’s primary football competition. Contested by 20 clubs, it operates on a system of promotion and relegation with the English Football League. Premier League season runs from August to May, Teams play 38 matches each, totalling 380 matches in the season. I have to say that it’s my favorite league in the world, I do really enjoy the high competitiveness of Premier League, Also in the video game, it’s a wise choice to start your career mode using a Premier League team due to the high transfer budget.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;The soccer data is collected and prepared by James P. Curley (2016). engsoccerdata: English Soccer Data&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;import-and-clean-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Import and clean the data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(devtools)
# install_github(&amp;#39;jalapic/engsoccerdata&amp;#39;, username = &amp;#39;jalapic&amp;#39;)
library(engsoccerdata)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)

df &amp;lt;- as_tibble(england)

# The dataset includes results of all top 4 tier soccer games in England
# since 1888, In our analysis, We are only interested in the Premier League
# which started in 1992.
df$date &amp;lt;- as.Date(df$Date, format = &amp;quot;%Y-%m-%d&amp;quot;)
pl &amp;lt;- df %&amp;gt;% filter(tier == 1, Season &amp;gt;= 1992)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visulizating-some-interesting-facts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visulizating some interesting facts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The followings are the 47 teams that ever played in Premier League for at least one season&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sort(unique(pl$home))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;AFC Bournemouth&amp;quot;         &amp;quot;Arsenal&amp;quot;                
##  [3] &amp;quot;Aston Villa&amp;quot;             &amp;quot;Barnsley&amp;quot;               
##  [5] &amp;quot;Birmingham City&amp;quot;         &amp;quot;Blackburn Rovers&amp;quot;       
##  [7] &amp;quot;Blackpool&amp;quot;               &amp;quot;Bolton Wanderers&amp;quot;       
##  [9] &amp;quot;Bradford City&amp;quot;           &amp;quot;Burnley&amp;quot;                
## [11] &amp;quot;Cardiff City&amp;quot;            &amp;quot;Charlton Athletic&amp;quot;      
## [13] &amp;quot;Chelsea&amp;quot;                 &amp;quot;Coventry City&amp;quot;          
## [15] &amp;quot;Crystal Palace&amp;quot;          &amp;quot;Derby County&amp;quot;           
## [17] &amp;quot;Everton&amp;quot;                 &amp;quot;Fulham&amp;quot;                 
## [19] &amp;quot;Hull City&amp;quot;               &amp;quot;Ipswich Town&amp;quot;           
## [21] &amp;quot;Leeds United&amp;quot;            &amp;quot;Leicester City&amp;quot;         
## [23] &amp;quot;Liverpool&amp;quot;               &amp;quot;Manchester City&amp;quot;        
## [25] &amp;quot;Manchester United&amp;quot;       &amp;quot;Middlesbrough&amp;quot;          
## [27] &amp;quot;Newcastle United&amp;quot;        &amp;quot;Norwich City&amp;quot;           
## [29] &amp;quot;Nottingham Forest&amp;quot;       &amp;quot;Oldham Athletic&amp;quot;        
## [31] &amp;quot;Portsmouth&amp;quot;              &amp;quot;Queens Park Rangers&amp;quot;    
## [33] &amp;quot;Reading&amp;quot;                 &amp;quot;Sheffield United&amp;quot;       
## [35] &amp;quot;Sheffield Wednesday&amp;quot;     &amp;quot;Southampton&amp;quot;            
## [37] &amp;quot;Stoke City&amp;quot;              &amp;quot;Sunderland&amp;quot;             
## [39] &amp;quot;Swansea City&amp;quot;            &amp;quot;Swindon Town&amp;quot;           
## [41] &amp;quot;Tottenham Hotspur&amp;quot;       &amp;quot;Watford&amp;quot;                
## [43] &amp;quot;West Bromwich Albion&amp;quot;    &amp;quot;West Ham United&amp;quot;        
## [45] &amp;quot;Wigan Athletic&amp;quot;          &amp;quot;Wimbledon&amp;quot;              
## [47] &amp;quot;Wolverhampton Wanderers&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;which clubs have never been relegated from the league ?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pl_team &amp;lt;- pl %&amp;gt;%
       group_by(home) %&amp;gt;%
       summarize(appearence = n_distinct(Season))

pl_team %&amp;gt;%
  mutate(home = reorder(home, appearence)) %&amp;gt;%
  top_n(15) %&amp;gt;%
  ggplot(aes(x = reorder(home, -appearence), y = appearence)) +
  geom_bar(stat = &amp;#39;identity&amp;#39;, fill = &amp;#39;lightblue&amp;#39;, color = &amp;#39;black&amp;#39;) +
  theme(axis.text.x=element_text(angle=45, hjust=1)) +
  xlab(&amp;#39;Club&amp;#39;) +
  ylab(&amp;#39;Season&amp;#39;) +
  ggtitle(&amp;#39;Total Seasons in Premier League&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://songyang0716.github.io/post/premier_league_analysis_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Since the start of the Premier League, seven clubs have never faced the drop: They are &lt;strong&gt;Arsenal, Aston Villa, Chelsea, Everton, Liverpool, Man Utd and Hotspur&lt;/strong&gt;. Hopefully, we could see Newcastle United in the next season ! &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ranking of each club in the past 25 years&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pl_rank &amp;lt;- pl %&amp;gt;%
           mutate(home_team_point = ifelse(hgoal &amp;gt; vgoal, 3, ifelse(hgoal == vgoal, 1, 0))) %&amp;gt;%
           mutate(away_team_point = ifelse(vgoal &amp;gt; hgoal, 3, ifelse(hgoal == vgoal, 1, 0)))
temp1 &amp;lt;-  pl_rank %&amp;gt;%
           group_by(Season, home) %&amp;gt;%
           summarize(home_points = sum(home_team_point))
temp2 &amp;lt;- pl_rank %&amp;gt;%
          group_by(Season, visitor) %&amp;gt;%
          summarize(away_points = sum(away_team_point))
temp1$away_points &amp;lt;- temp2$away_points
pl_rank &amp;lt;- temp1 %&amp;gt;%
           mutate(total_points = home_points + away_points)

pl_rank &amp;lt;- pl_rank %&amp;gt;%
           rename(Team = home) %&amp;gt;%
           group_by(Season) %&amp;gt;%
           arrange(-total_points) %&amp;gt;%
           mutate(ranking = row_number())

# We only include some famous football clubs in the visulization

pl_rank  %&amp;gt;%
    filter(Team %in% c(&amp;#39;Arsenal&amp;#39;,&amp;#39;Chelsea&amp;#39;,&amp;#39;Everton&amp;#39;,
                        &amp;#39;Liverpool&amp;#39;,&amp;#39;Manchester City&amp;#39;,&amp;#39;Manchester United&amp;#39;,
                        &amp;#39;Tottenham Hotspur&amp;#39;, &amp;#39;Leicester City&amp;#39;)) %&amp;gt;%
    ggplot(aes(x = Season, y = ranking, group = Team, colour = Team)) +
    geom_line(size = 1) +
    geom_point() +
    scale_x_continuous(breaks=seq(1992,2015,1)) +
    theme(axis.text.x=element_text(angle=45, hjust=1)) +
    xlab(&amp;#39;Year&amp;#39;) +
    ylab(&amp;#39;Standing&amp;#39;) +
    ggtitle(&amp;#39;Top Team Standing&amp;#39;) +
    theme(legend.position=&amp;quot;bottom&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://songyang0716.github.io/post/premier_league_analysis_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From the plot, We notice Manchester United wins the most titles in the premier league history and fans are impressed by their stability and consistency before Ferguson’s retirement in 2012. On the other hand, Manchester City is not a championship competitor before, After being purchased by the &lt;strong&gt;Abu Dhabi United Group&lt;/strong&gt; in 2008, the club took transfer spending to an unprecendented level and the continued inverstment in players followed in gradually successive seasons.&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;div id=&#34;could-defense-win-championships&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Could Defense win championships ?&lt;/h3&gt;
&lt;p&gt;In 2004, Greece won the European Championship with a defense first approach. They did manage to score in the process, but it was their defense that allowed them to claim the title. In addition, &lt;strong&gt;Mourinho&lt;/strong&gt; helped Inter Milan to win the 2010 Champions League by employing the so called ‘parking the bus’ strategy, avoiding attacking play and let all team chasing the ball in their half-court. Clearly, All of the examples I cited are in the tournament game. So I want to learn that if it’s possible for a team with an average offensive ability and outstanding defensive ability to win the premier league ?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;offense-and-defence-which-one-is-more-important&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Offense and Defence, Which one is more important ?&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Review of Spelling Correction</title>
      <link>https://songyang0716.github.io/2017/04/a-review-of-spelling-correction/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://songyang0716.github.io/2017/04/a-review-of-spelling-correction/</guid>
      <description>&lt;p&gt;A tutorial on Non-Word Spelling Correction and Real Word Spelling Correction
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note : The ideas and contents of this tutorial is from Stanford Professor Dan Jurafsky&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;Recently, I am always interrupted by the annoying &lt;a href=&#34;https://www.grammarly.com/&#34;&gt;Grammarly&lt;/a&gt; ads on Youtube. In the same time, I can&amp;rsquo;t help to watch and astonished by the powerful features in this playform, one of the feature is to correct misspelled words in your email, flags words in a email that may not be spelled correctly. Then I decided to learn the ideas behind it. Spelling correction is often considered from two perspectives. &lt;strong&gt;Non-word spelling correction&lt;/strong&gt; is the detection and correction of spelling errors that result in non-words (like &lt;em&gt;speling&lt;/em&gt; for &lt;em&gt;spelling&lt;/em&gt;, &lt;em&gt;corection&lt;/em&gt; for &lt;em&gt;correction&lt;/em&gt;). By contrast, &lt;strong&gt;real word spelling correction&lt;/strong&gt; is the task of detecting and correcting spelling errors even if they accidentally result in an actual word of English (I like to eat Cheescake Factory &lt;em&gt;desert&lt;/em&gt;: which is suppose to be &lt;em&gt;dessert&lt;/em&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Non-word spelling errors&lt;/strong&gt; are detected by looking for any word not found in a dictionary. For example, the word &lt;em&gt;speling&lt;/em&gt; can&amp;rsquo;t be found in a dictionary. To correct non-word spelling errors we need to generate &lt;strong&gt;candidates&lt;/strong&gt; : real words that have a similar pattern to the error. Candidate corrections from the spelling error &lt;em&gt;speling&lt;/em&gt; might include &lt;em&gt;speeding&lt;/em&gt;, &lt;em&gt;spoiling&lt;/em&gt;, &lt;em&gt;spiking&lt;/em&gt;, &lt;em&gt;spending&lt;/em&gt; or &lt;em&gt;spelling&lt;/em&gt;. Then we rank the candidate using a &lt;strong&gt;distance metric&lt;/strong&gt; between the source and the surface error.  We want the word &lt;em&gt;spelling&lt;/em&gt; has the highest probability among all the candidates&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Real-word spelling error&lt;/strong&gt; detection is much more difficult, since any word in the input text could be an error. However, we could still find the candidate of all words that occurs in a sentence and rank all the combinations to find the users original intentional one&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;

&lt;p&gt;In order to learn the spelling correction, we need to introduce the &lt;strong&gt;noisy channel model&lt;/strong&gt; first and show how to apply it to the task of detecing and correcting spelling errors.&lt;/p&gt;

&lt;p&gt;The intuition of the &lt;strong&gt;noisy channel&lt;/strong&gt; model is to treat the misspelled word as if a correctly spelled word had been &amp;ldquo;&amp;ldquo;distorted&amp;rdquo; by being passed through a noisy communication channel. This channel introduces &amp;ldquo;noise&amp;rdquo; in the form of substitution or other changes to the letters, making it hard to recognize the &amp;ldquo;true&amp;rdquo; word. Our goal is to build a model of the channel. Given this model, we then find the true word by passing every candidate word of the language through our model of the noisy channel and seeing which one comes the closest to the misspelled word.&lt;/p&gt;

&lt;p&gt;The noisy channel is a kind of &lt;strong&gt;Bayesian Inference&lt;/strong&gt;. For each given misspelled word &lt;em&gt;x&lt;/em&gt;, Our job is to find one correct spelled word &lt;em&gt;w&lt;/em&gt; with the highest possibility.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                        w_hat = argmaxP(w|x)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-baby-version-of-word-spelling-corrector&#34;&gt;A baby version of Word Spelling Corrector&lt;/h3&gt;

&lt;h4 id=&#34;python-version&#34;&gt;Python Version&lt;/h4&gt;


  
    
  
  
    
  
  
    
  
  
    
  


&lt;figure class=&#34;highlight python&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;spell.py&lt;/span&gt;&lt;a href=&#34;http://underscorejs.org/#compact&#34; target=&#34;_blank&#34; rel=&#34;external&#34;&gt;spell.py&lt;/a&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;python code-highlight&#34;&gt;import re
from collections import Counter

def words(text) : return re.findall(r&amp;#39;\w&amp;#43;&amp;#39;, text.lower())

WORDS = Counter(words(open(&amp;#39;big.txt&amp;#39;).read()))

def P(word, N = sum(WORDS.values())):
    # Probability of the word
    return WORDS[word] * 1.0 / N

def correction(word):
    # Return the maximum prob word
    return max(candidate(word), key = P)

def candidate(word):
    return (known([word]) | known(edit1(word)) | known(edit2(word)) | {word})

def known(words):
    return set(w for w in words if w in WORDS)

def edit1(word):
    # All edit that are one edit away from word
    letters = &amp;#34;abcdefghijklmnopqrstuvwxyz&amp;#34;
    splits = [(word[:i], word[i:])for i in range(len(word) &amp;#43; 1)]
    deletes = {L &amp;#43; R[1:] for L, R in splits if R}
    inserts = {L &amp;#43; letter &amp;#43; R for L, R in splits for letter in letters}
    sub = {L &amp;#43; letter &amp;#43; R[1:] for L, R in splits if R for letter in letters}
    trans = {L &amp;#43; R[1] &amp;#43; R[0] &amp;#43; R[2:] for L, R in splits if len(R) &amp;gt; 1}
    return deletes | inserts | trans | sub | {word}

def edit2(word):
    return {e2 for e1 in edit1(word) for e2 in edit1(e1)}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://songyang0716.github.io/2017/04/hello-world/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://songyang0716.github.io/2017/04/hello-world/</guid>
      <description>&lt;p&gt;Welcome to my Den !
&lt;/p&gt;

&lt;h3 id=&#34;about-me&#34;&gt;About me&lt;/h3&gt;

&lt;p&gt;My name is Yang Song, I am a Data Scientist at &lt;a href=&#34;http://www.homedepot.com/&#34;&gt;The Home Depot&lt;/a&gt; - mainly focus on the &lt;a href=&#34;http://www.homedepot.com/services/&#34;&gt;Home Services Program&lt;/a&gt; and &lt;a href=&#34;https://www.proreferral.com/&#34;&gt;Pro Referral Platform&lt;/a&gt;. In June 2015 I received my Master&amp;rsquo;s Degree in Statistics from &lt;a href=&#34;http://www.stanford.edu/&#34;&gt;Stanford University&lt;/a&gt;. My interests include statistics, data analysis, data visulization, machine learning and programming in R and Python.&lt;/p&gt;

&lt;p&gt;I enjoy teaching to others for things that I understand, and also looking forward to learning from others. When I write code I usually do it in Python and R, but historically I spent some time in Java and C++. I also have fair amount of experiences using Tableau for visualization purpose.&lt;/p&gt;

&lt;p&gt;I am now living in the San Francisco Bay Area, I am a big sports fan, especially into Soccer and Basketball, &lt;a href=&#34;https://en.wikipedia.org/wiki/Beijing_Sinobo_Guoan_F.C.&#34;&gt;Guoan&lt;/a&gt; is my most favorite team and one of my childhood dreams is to become a part of it.&lt;/p&gt;

&lt;p&gt;Other random facts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was grew up in Beijing and attended a &lt;a href=&#34;http://www.bjroyalschool.com/&#34;&gt;boarding school&lt;/a&gt; since 6 years old&lt;/li&gt;
&lt;li&gt;I started playing &lt;a href=&#34;https://en.wikipedia.org/wiki/FIFA_(video_game_series)&#34;&gt;FIFA soccer&lt;/a&gt; since 1999 and that&amp;rsquo;s my only favorite game&lt;/li&gt;
&lt;li&gt;I have more than 10 pairs of &lt;a href=&#34;https://en.wikipedia.org/wiki/Air_Jordan&#34;&gt;Air Jordan Shoes&lt;/a&gt;, the first pair is the AJ XII&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;about-this-blog&#34;&gt;About this blog&lt;/h3&gt;

&lt;p&gt;I have been inspired by the active community of data science and benefited significantly from reading and following others&amp;rsquo; blogs and tutorials. My favorite data science blogs include, but not limited to &lt;a href=&#34;https://yihui.name/en/about/&#34;&gt;Yihui Xie&lt;/a&gt;, &lt;a href=&#34;http://varianceexplained.org/&#34;&gt;David Robinson&lt;/a&gt;, &lt;a href=&#34;http://juliasilge.com/&#34;&gt;Julia Silge&lt;/a&gt; and &lt;a href=&#34;https://sebastianraschka.com/blog/index.html&#34;&gt;Sebastian Raschka&lt;/a&gt;. After learning from these selfless people &amp;amp; teams, I decided to create my own portfolio to keep track on my learning process as well as share my knowledge to others. This blog will focus on natural language processing, data analysis, machine learning and data visualization by using real-world dataset.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I would like to hear from you if there is any question or feedback, My email address is yangsong0716@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This blog is created using the new R blogdown package which integrates Github and Hugo. To learn more about it, I recommend this great &lt;a href=&#34;https://tclavelle.github.io/blog/blogdown_github/&#34;&gt;tutorial&lt;/a&gt; by Tyler Clavelle&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>