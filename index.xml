<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yang&#39;s Den</title>
    <link>https://songyang0716.github.io/index.xml</link>
    <description>Recent content on Yang&#39;s Den</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://songyang0716.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Review of Spelling Correction</title>
      <link>https://songyang0716.github.io/2017/04/a-review-of-spelling-correction/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://songyang0716.github.io/2017/04/a-review-of-spelling-correction/</guid>
      <description>&lt;p&gt;A tutorial on Non-Word Spelling Correction and Real Word Spelling Correction
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note : The ideas and contents of this tutorial is from Stanford Professor Dan Jurafsky&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;Recently, I am always interrupted by the annoying &lt;a href=&#34;https://www.grammarly.com/&#34;&gt;Grammarly&lt;/a&gt; ads on Youtube. In the same time, I can&amp;rsquo;t help to watch and astonished by the powerful features in this playform, one of the feature is to correct misspelled words in your email, flags words in a email that may not be spelled correctly. Then I decided to learn the ideas behind it. Spelling correction is often considered from two perspectives. &lt;strong&gt;Non-word spelling correction&lt;/strong&gt; is the detection and correction of spelling errors that result in non-words (like &lt;em&gt;speling&lt;/em&gt; for &lt;em&gt;spelling&lt;/em&gt;, &lt;em&gt;corection&lt;/em&gt; for &lt;em&gt;correction&lt;/em&gt;). By contrast, &lt;strong&gt;real word spelling correction&lt;/strong&gt; is the task of detecting and correcting spelling errors even if they accidentally result in an actual word of English (I like to eat Cheescake Factory &lt;em&gt;desert&lt;/em&gt;: which is suppose to be &lt;em&gt;dessert&lt;/em&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Non-word spelling errors&lt;/strong&gt; are detected by looking for any word not found in a dictionary. For example, the word &lt;em&gt;speling&lt;/em&gt; can&amp;rsquo;t be found in a dictionary. To correct non-word spelling errors we need to generate &lt;strong&gt;candidates&lt;/strong&gt; : real words that have a similar pattern to the error. Candidate corrections from the spelling error &lt;em&gt;speling&lt;/em&gt; might include &lt;em&gt;speeding&lt;/em&gt;, &lt;em&gt;spoiling&lt;/em&gt;, &lt;em&gt;spiking&lt;/em&gt;, &lt;em&gt;spending&lt;/em&gt; or &lt;em&gt;spelling&lt;/em&gt;. Then we rank the candidate using a &lt;strong&gt;distance metric&lt;/strong&gt; between the source and the surface error.  We want the word &lt;em&gt;spelling&lt;/em&gt; has the highest probability among all the candidates&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Real-word spelling error&lt;/strong&gt; detection is much more difficult, since any word in the input text could be an error. However, we could still find the candidate of all words that occurs in a sentence and rank all the combinations to find the users original intentional one&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;

&lt;p&gt;In order to learn the spelling correction, we need to introduce the &lt;strong&gt;noisy channel model&lt;/strong&gt; first and show how to apply it to the task of detecing and correcting spelling errors.&lt;/p&gt;

&lt;p&gt;The intuition of the &lt;strong&gt;noisy channel&lt;/strong&gt; model is to treat the misspelled word as if a correctly spelled word had been &amp;ldquo;&amp;ldquo;distorted&amp;rdquo; by being passed through a noisy communication channel.&lt;/p&gt;

&lt;h3 id=&#34;a-baby-version-of-word-spelling-corrector&#34;&gt;A baby version of Word Spelling Corrector&lt;/h3&gt;

&lt;h4 id=&#34;python-version&#34;&gt;Python Version&lt;/h4&gt;


  
    
  
  
    
  
  
    
  
  
    
  


&lt;figure class=&#34;highlight python&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;spell.py&lt;/span&gt;&lt;a href=&#34;http://underscorejs.org/#compact&#34; target=&#34;_blank&#34; rel=&#34;external&#34;&gt;spell.py&lt;/a&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;python code-highlight&#34;&gt;import re
from collections import Counter

def words(text) : return re.findall(r&amp;#39;\w&amp;#43;&amp;#39;, text.lower())

WORDS = Counter(words(open(&amp;#39;big.txt&amp;#39;).read()))

def P(word, N = sum(WORDS.values())):
    # Probability of the word
    return WORDS[word] * 1.0 / N

def correction(word):
    # Return the maximum prob word
    return max(candidate(word), key = P)

def candidate(word):
    return (known([word]) | known(edit1(word)) | known(edit2(word)) | {word})

def known(words):
    return set(w for w in words if w in WORDS)

def edit1(word):
    # All edit that are one edit away from word
    letters = &amp;#34;abcdefghijklmnopqrstuvwxyz&amp;#34;
    splits = [(word[:i], word[i:])for i in range(len(word) &amp;#43; 1)]
    # Del
    deletes = {L &amp;#43; R[1:] for L, R in splits if R}
    # Insert
    inserts = {L &amp;#43; letter &amp;#43; R for L, R in splits for letter in letters}
    # Sub
    sub = {L &amp;#43; letter &amp;#43; R[1:] for L, R in splits if R for letter in letters}
    # Trans
    trans = {L &amp;#43; R[1] &amp;#43; R[0] &amp;#43; R[2:] for L, R in splits if len(R) &amp;gt; 1}

    return deletes | inserts | trans | sub | {word}

def edit2(word):
    return {e2 for e1 in edit1(word) for e2 in edit1(e1)}&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://songyang0716.github.io/2017/04/hello-world/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://songyang0716.github.io/2017/04/hello-world/</guid>
      <description>&lt;p&gt;Welcome to my Den !
&lt;/p&gt;

&lt;h3 id=&#34;about-me&#34;&gt;About me&lt;/h3&gt;

&lt;p&gt;My name is Yang Song, I am a Data Scientist at &lt;a href=&#34;http://www.homedepot.com/&#34;&gt;The Home Depot&lt;/a&gt; - mainly focus on the &lt;a href=&#34;http://www.homedepot.com/services/&#34;&gt;Home Services Program&lt;/a&gt; and &lt;a href=&#34;https://www.proreferral.com/&#34;&gt;Pro Referral Platform&lt;/a&gt;. In June 2015 I received my Master&amp;rsquo;s Degree in Statistics from &lt;a href=&#34;http://www.stanford.edu/&#34;&gt;Stanford University&lt;/a&gt;. My interests include statistics, data analysis, data visulization, machine learning and programming in R and Python.&lt;/p&gt;

&lt;p&gt;I enjoy teaching to others for things that I understand, and also looking forward to learning from others. When I write code I usually do it in Python and R, but historically I spent some time in Java and C++. I also have fair amount of experiences using Tableau for visualization purpose.&lt;/p&gt;

&lt;p&gt;I am now living in the San Francisco Bay Area, I am a big sports fan, especially into Soccer and Basketball, &lt;a href=&#34;https://en.wikipedia.org/wiki/Beijing_Sinobo_Guoan_F.C.&#34;&gt;Guoan&lt;/a&gt; is my most favorite team and one of my childhood dreams is to become a part of it.&lt;/p&gt;

&lt;p&gt;Other random facts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was grew up in Beijing and attended a &lt;a href=&#34;http://www.bjroyalschool.com/&#34;&gt;rural boarding school&lt;/a&gt; since 6 years old&lt;/li&gt;
&lt;li&gt;I started playing &lt;a href=&#34;https://en.wikipedia.org/wiki/FIFA_(video_game_series)&#34;&gt;FIFA soccer&lt;/a&gt; since 1999 and that&amp;rsquo;s my only favorite game&lt;/li&gt;
&lt;li&gt;I have more than 20 pairs of &lt;a href=&#34;https://en.wikipedia.org/wiki/Air_Jordan&#34;&gt;Air Jordan Shoes&lt;/a&gt;, the first pair is the AJ XII&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;about-this-blog&#34;&gt;About this blog&lt;/h3&gt;

&lt;p&gt;I have been inspired by the active community of data science and benefited significantly from reading and following others&amp;rsquo; blogs and tutorials. My favorite data science blogs include, but not limited to &lt;a href=&#34;https://yihui.name/en/about/&#34;&gt;Yihui Xie&lt;/a&gt;, &lt;a href=&#34;http://varianceexplained.org/&#34;&gt;David Robinson&lt;/a&gt;, &lt;a href=&#34;http://juliasilge.com/&#34;&gt;Julia Silge&lt;/a&gt; and &lt;a href=&#34;https://sebastianraschka.com/blog/index.html&#34;&gt;Sebastian Raschka&lt;/a&gt;. After learning from these selfless people &amp;amp; teams, I decided to create my own portfolio to keep track on my learning process as well as share my knowledge to others. This blog will focus on natural language processing, data analysis, machine learning and data visualization by using real-world dataset.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I would like to hear from you if there is any question or feedback, My email address is yangsong0716@gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This blog is created using the new R blogdown package which integrates Github and Hugo. To learn more about it, I recommend this great &lt;a href=&#34;https://tclavelle.github.io/blog/blogdown_github/&#34;&gt;tutorial&lt;/a&gt; by Tyler Clavelle&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>